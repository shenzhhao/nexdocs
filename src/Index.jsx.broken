import React, { useState, useEffect } from 'react';
import UECModel from './components/UECModel';
import FlowChart from './components/FlowChart';
import RequirementSummary from './components/RequirementSummary';
import CollaborationPage from './components/CollaborationPage';
import ModelSelector from './components/ModelSelector';
import './styles/gradientAnimation.css'; // 引入动画样式

const Index = ({ onBack }) => {
  const [activeTab, setActiveTab] = useState('uec');
  const [prdContent, setPrdContent] = useState('');
  const [inputValue, setInputValue] = useState('');
  const [selectedModel, setSelectedModel] = useState('KIMI-R1.5');
  const [isInputHovered, setIsInputHovered] = useState(false);
  // 添加调试日志
  useEffect(() => {
    console.log('当前活动选项卡:', activeTab);
  }, [activeTab]);

  // 处理PRD内容导入
  const handlePrdImport = (content) => {
    setPrdContent(content);
    console.log('PRD内容已导入:', content.substring(0, 50) + '...');
  };

  // 处理输入变化
  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  // 处理提交
  const handleSubmit = () => {
    if (inputValue.trim()) {
      handlePrdImport(inputValue);
      setInputValue('');
    }
  };

  // 处理模型选择
  const handleModelSelect = (model) => {
    console.log('选择模型:', model);
    setSelectedModel(model);
  };

  // 模拟导入示例PRD
  const importSamplePrd = () => {
    const samplePrd = `需求解读器插件是一款能够将复杂的需求文档（如 PRD）转化为易于理解和高效沟通的视觉化内容（如 UEC 模型、流程图等）的工具。该插件可以集成到浏览器中，帮助产品、设计和开发人员快速理解需求，减少沟通成本，确保团队对需求的高度对齐。

核心功能包括：
1. PRD 转 UEC 模型
2. 自动生成简洁描述与流程图
3. 浏览器插件集成
4. 团队协作与反馈`;
    handlePrdImport(samplePrd);
  };

  // 渲染当前活动的内容区域
  const renderContent = () => {
    console.log('渲染内容区域:', activeTab);

    switch (activeTab) {
      case 'uec':
        return <UECModel prdContent={prdContent} />;
      case 'flow':
        return <FlowChart prdContent={prdContent} />;
      case 'summary':
        return <RequirementSummary prdContent={prdContent} />;
      case 'collaborate':
        console.log('渲染团队协作与反馈组件');
        return <CollaborationPage prdContent={prdContent} />;
      default:
        return <UECModel prdContent={prdContent} />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* 侧边栏 */}
      <div className="w-60 bg-gray-50 border-r border-gray-200 flex flex-col">
        {/* 顶部标题 */}
        <div className="h-16 flex items-center px-4 border-b border-gray-200">
          <div className="flex items-center gap-2">
            <span className="text-gray-500">logo</span>
            <h1 className="text-base font-medium text-gray-900">NexDocs</h1>
          </div>
        </div>

        {/* 菜单项 */}
        <div className="flex-1 py-4 px-3 space-y-2">
          <button
            className="w-full flex items-center gap-2 px-4 py-2 text-sm text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
            onClick={() => {
              console.log('点击新导入标签');
              importSamplePrd();
              setActiveTab('uec');
            }}
          >
            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="none">
              <path d="M10 4V16M4 10H16" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <span>新导入</span>
          </button>

          <button
            className={`w-full flex items-center gap-2 px-4 py-2 text-sm text-gray-700 rounded-md hover:bg-gray-200 ${activeTab === 'flow' ? 'bg-gray-200' : ''}`}
            onClick={() => {
              console.log('点击流程图标签');
              if (!prdContent) {
                importSamplePrd();
              }
              setActiveTab('flow');
            }}
          >
            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="none">
              <rect x="3" y="3" width="14" height="14" rx="2" stroke="currentColor" strokeWidth="2"/>
              <path d="M7 7H13M7 10H13M7 13H10" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <span>流程图</span>
          </button>

          <button
            className={`w-full flex items-center gap-2 px-4 py-2 text-sm text-gray-700 rounded-md hover:bg-gray-200 ${activeTab === 'summary' ? 'bg-gray-200' : ''}`}
            onClick={() => {
              console.log('点击简洁描述标签');
              if (!prdContent) {
                importSamplePrd();
              }
              setActiveTab('summary');
            }}
          >
            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="none">
              <circle cx="10" cy="10" r="7" stroke="currentColor" strokeWidth="2"/>
              <path d="M10 7V13M7 10H13" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <span>简洁描述</span>
          </button>
          <button
            className={`w-full flex items-center gap-2 px-4 py-2 text-sm text-gray-700 rounded-md hover:bg-gray-200 ${activeTab === 'collaborate' ? 'bg-gray-200' : ''}`}
            onClick={() => {
              console.log('点击团队反馈标签');
              if (!prdContent) {
                importSamplePrd();
              }
              setActiveTab('collaborate');
            }}
          >
            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="none">
              <rect x="3" y="3" width="14" height="14" rx="2" stroke="currentColor" strokeWidth="2"/>
              <path d="M7 7H13M7 10H13M7 13H13" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <span>团队反馈</span>
          </button>
        </div>

        {/* 历史对话 */}
        <div className="px-4 py-3 border-t border-gray-200">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm text-gray-700">历史对话</span>
            <button className="text-gray-500">
              <svg className="w-4 h-4" viewBox="0 0 16 16" fill="none">
                <circle cx="8" cy="8" r="7" stroke="currentColor" strokeWidth="1.5"/>
                <path d="M8 5V11M5 8H11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round"/>
              </svg>
            </button>
          </div>

          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <svg className="w-4 h-4" viewBox="0 0 16 16" fill="none">
                <path d="M3 14V2C3 1.44772 3.44772 1 4 1H12C12.5523 1 13 1.44772 13 2V14L8 11L3 14Z" stroke="currentColor" strokeWidth="1.5"/>
              </svg>
              <span>用户生成UI</span>
            </div>

            <div className="flex items-center gap-2 text-sm text-gray-600">
              <svg className="w-4 h-4" viewBox="0 0 16 16" fill="none">
                <path d="M3 14V2C3 1.44772 3.44772 1 4 1H12C12.5523 1 13 1.44772 13 2V14L8 11L3 14Z" stroke="currentColor" strokeWidth="1.5"/>
              </svg>
              <span>新对话</span>
            </div>
          </div>
        </div>

        {/* 返回首页按钮 */}
        <div className="px-4 py-3 border-t border-gray-200">
          <button
            onClick={onBack}
            className="w-full flex items-center gap-2 px-4 py-2 text-sm text-gray-700 rounded-md hover:bg-gray-200"
          >
            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="none">
              <path d="M10 16L4 10L10 4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M16 10H4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
            <span>返回首页</span>
          </button>
        </div>
      </div>

      {/* 主内容区域 */}
      <div className="flex-1 flex flex-col">
        <main className="flex-1 flex flex-col items-center justify-center p-6">
          {prdContent ? (
            renderContent()
          ) : (
            <div className="w-full max-w-3xl flex flex-col">
              <div className="w-[600px]">
                <div className="flex justify-between items-center mb-[15px]">
                  <h2 className="text-3xl font-medium text-gray-900 font-['MeiTuan_Type']">你好，PRD请尽管扔给我</h2>
                  <button
                    onClick={importSamplePrd}
                    className="text-[30px] px-[25px] py-[5px] bg-[#3301FF] text-white rounded-[20px] hover:bg-opacity-90 transition-colors"
                  >
                    演示示例PRD
                  </button>
                </div>

                <div className="relative">
                  {/* 使用动态渐变边框 */}
                  <div className="w-[550px] relative gradient-border p-[1.2px] rounded-[15px]">
                    <div
                      className="w-full h-full bg-white rounded-[14px] relative overflow-hidden transition-all duration-300"
                      onMouseEnter={() => setIsInputHovered(true)}
                      onMouseLeave={() => setIsInputHovered(false)}
                    >
                      <textarea
                        className={`w-full bg-white rounded-[14px] focus:outline-none font-['PingFang_SC'] resize-none border-0 text-[13px] text-gray-700 transition-all duration-300 ${
                          isInputHovered || inputValue.trim() !== ''
                            ? 'h-[110px] pt-[9px] pb-[38px] px-[10px]'
                            : 'h-[40px] py-[9px] px-[10px]'
                        }`}
                        placeholder="你可以在这里输入任何你想解析的prd..."
                        value={inputValue}
                        onChange={handleInputChange}
                      ></textarea>

                      {/* 按钮区域 - 位于输入框内部底部，在hover或有内容时显示 */}
                      <div className={`absolute bottom-[9px] left-[10px] right-[10px] flex justify-between items-center transition-all duration-300 ${
                        isInputHovered || inputValue.trim() !== '' ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'
                      }`}>
                        {/* 使用ModelSelector组件 */}
                        <ModelSelector
                          selectedModel={selectedModel}
                          onModelSelect={handleModelSelect}
                        />

                        {/* 发送按钮 */}
                        <button
                          className="h-[20px] flex items-center px-3 py-0 bg-[#3301FF] text-white text-xs rounded-[8px] hover:bg-opacity-90"
                          onClick={handleSubmit}
                        >
                          <span>发送</span>
                          <svg className="w-3 h-3 ml-1" viewBox="0 0 16 16" fill="none">
                            <path d="M1 8h14M9 2l6 6-6 6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
                            type="button"
                            className="h-[20px] flex items-center gap-1 px-2 py-0 text-xs text-gray-600 hover:text-gray-800"
                            onClick={() => setShowApiKeyModal(true)}
                            title="设置API密钥"
                          >
                            <svg className="w-3 h-3" viewBox="0 0 16 16" fill="none">
                              <path d="M7 14A7 7 0 107 0a7 7 0 000 14zM7 4v4M7 10v.01" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </button>
                        </div>

                        {/* 发送按钮 */}
                        <button
                          className="h-[20px] flex items-center px-3 py-0 bg-[#3301FF] text-white text-xs rounded-[8px] hover:bg-opacity-90"
                          onClick={handleSubmit}
                        >
                          <span>发送</span>
                          <svg className="w-3 h-3 ml-1" viewBox="0 0 16 16" fill="none">
                            <path d="M1 8h14M9 2l6 6-6 6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>

      {/* API密钥设置模态框 */}
      <ApiKeyModal isOpen={showApiKeyModal} onClose={handleApiKeyModalClose} />
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
                          </svg>
                        </button>
            </div>
      </div>
    </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
                        {/* 使用ModelSelector组件 */}
                        <div className="flex items-center gap-2">
                          <ModelSelector
                            selectedModel={selectedModel}
                            onModelSelect={handleModelSelect}
                          />

                          <button
                            type="button"
                            className="h-[20px] flex items-center gap-1 px-2 py-0 text-xs text-gray-600 hover:text-gray-800"
                            onClick={() => setShowApiKeyModal(true)}
                            title="设置API密钥"
                          >
                            <svg className="w-3 h-3" viewBox="0 0 16 16" fill="none">
                              <path d="M7 14A7 7 0 107 0a7 7 0 000 14zM7 4v4M7 10v.01" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </button>
                        </div>

                        {/* 发送按钮 */}
                        <button
                          className="h-[20px] flex items-center px-3 py-0 bg-[#3301FF] text-white text-xs rounded-[8px] hover:bg-opacity-90"
                          onClick={handleSubmit}
                        >
                          <span>发送</span>
                          <svg className="w-3 h-3 ml-1" viewBox="0 0 16 16" fill="none">
                            <path d="M1 8h14M9 2l6 6-6 6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>

      {/* API密钥设置模态框 */}
      <ApiKeyModal isOpen={showApiKeyModal} onClose={handleApiKeyModalClose} />
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
                          </svg>
                        </button>
            </div>
      </div>
    </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default Index;
